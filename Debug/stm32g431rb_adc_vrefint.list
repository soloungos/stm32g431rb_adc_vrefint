
stm32g431rb_adc_vrefint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002840  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a38  08002a38  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002a38  08002a38  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a38  08002a38  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a38  08002a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08002a44  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08002a44  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c6c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001390  00000000  00000000  00027ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00029030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00029798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c61  00000000  00000000  00029e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cb0  00000000  00000000  00042aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000950d1  00000000  00000000  00048759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e34  00000000  00000000  000dd87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002a00 	.word	0x08002a00

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08002a00 	.word	0x08002a00

08000218 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d103      	bne.n	8000230 <LL_ADC_DMA_GetRegAddr+0x18>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t) &(ADCx->DR);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3340      	adds	r3, #64	; 0x40
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e001      	b.n	8000234 <LL_ADC_DMA_GetRegAddr+0x1c>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <LL_ADC_DMA_GetRegAddr+0x2c>)
 8000232:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8000234:	68fb      	ldr	r3, [r7, #12]
}
 8000236:	4618      	mov	r0, r3
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	5000030c 	.word	0x5000030c

08000248 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	431a      	orrs	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	609a      	str	r2, [r3, #8]
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800026e:	b480      	push	{r7}
 8000270:	b083      	sub	sp, #12
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
 8000276:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800027e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000282:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	431a      	orrs	r2, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000298:	683a      	ldr	r2, [r7, #0]
 800029a:	2a00      	cmp	r2, #0
 800029c:	d002      	beq.n	80002a4 <LL_ADC_SetGainCompensation+0x36>
 800029e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002a2:	e000      	b.n	80002a6 <LL_ADC_SetGainCompensation+0x38>
 80002a4:	2200      	movs	r2, #0
 80002a6:	431a      	orrs	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	611a      	str	r2, [r3, #16]
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <LL_ADC_REG_SetTriggerEdge>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	431a      	orrs	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	60da      	str	r2, [r3, #12]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80002de:	b480      	push	{r7}
 80002e0:	b087      	sub	sp, #28
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3330      	adds	r3, #48	; 0x30
 80002ee:	461a      	mov	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	0a1b      	lsrs	r3, r3, #8
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	f003 030c 	and.w	r3, r3, #12
 80002fa:	4413      	add	r3, r2
 80002fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	f003 031f 	and.w	r3, r3, #31
 8000308:	211f      	movs	r1, #31
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43db      	mvns	r3, r3
 8000310:	401a      	ands	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	0e9b      	lsrs	r3, r3, #26
 8000316:	f003 011f 	and.w	r1, r3, #31
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	f003 031f 	and.w	r3, r3, #31
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	431a      	orrs	r2, r3
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800032a:	bf00      	nop
 800032c:	371c      	adds	r7, #28
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000336:	b480      	push	{r7}
 8000338:	b087      	sub	sp, #28
 800033a:	af00      	add	r7, sp, #0
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	60b9      	str	r1, [r7, #8]
 8000340:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3314      	adds	r3, #20
 8000346:	461a      	mov	r2, r3
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	0e5b      	lsrs	r3, r3, #25
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	4413      	add	r3, r2
 8000354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	0d1b      	lsrs	r3, r3, #20
 800035e:	f003 031f 	and.w	r3, r3, #31
 8000362:	2107      	movs	r1, #7
 8000364:	fa01 f303 	lsl.w	r3, r1, r3
 8000368:	43db      	mvns	r3, r3
 800036a:	401a      	ands	r2, r3
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	0d1b      	lsrs	r3, r3, #20
 8000370:	f003 031f 	and.w	r3, r3, #31
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	431a      	orrs	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000380:	bf00      	nop
 8000382:	371c      	adds	r7, #28
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a0f      	ldr	r2, [pc, #60]	; (80003d8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d10a      	bne.n	80003b6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80003b4:	e00a      	b.n	80003cc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80003c2:	43db      	mvns	r3, r3
 80003c4:	401a      	ands	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80003cc:	bf00      	nop
 80003ce:	3714      	adds	r7, #20
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	407f0000 	.word	0x407f0000

080003dc <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003ee:	f023 0303 	bic.w	r3, r3, #3
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	431a      	orrs	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	611a      	str	r2, [r3, #16]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000416:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	6093      	str	r3, [r2, #8]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800043a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800043e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8000462:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <LL_DMA_EnableChannel+0x40>)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	4413      	add	r3, r2
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	4413      	add	r3, r2
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4908      	ldr	r1, [pc, #32]	; (8000494 <LL_DMA_EnableChannel+0x40>)
 8000474:	683a      	ldr	r2, [r7, #0]
 8000476:	440a      	add	r2, r1
 8000478:	7812      	ldrb	r2, [r2, #0]
 800047a:	4611      	mov	r1, r2
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	440a      	add	r2, r1
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6013      	str	r3, [r2, #0]
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	08002a18 	.word	0x08002a18

08000498 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000498:	b480      	push	{r7}
 800049a:	b087      	sub	sp, #28
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <LL_DMA_SetDataTransferDirection+0x4c>)
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	4413      	add	r3, r2
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004bc:	f023 0310 	bic.w	r3, r3, #16
 80004c0:	4908      	ldr	r1, [pc, #32]	; (80004e4 <LL_DMA_SetDataTransferDirection+0x4c>)
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	440a      	add	r2, r1
 80004c6:	7812      	ldrb	r2, [r2, #0]
 80004c8:	4611      	mov	r1, r2
 80004ca:	697a      	ldr	r2, [r7, #20]
 80004cc:	440a      	add	r2, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004d6:	bf00      	nop
 80004d8:	371c      	adds	r7, #28
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	08002a18 	.word	0x08002a18

080004e8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <LL_DMA_SetMode+0x48>)
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4413      	add	r3, r2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	461a      	mov	r2, r3
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	4413      	add	r3, r2
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f023 0220 	bic.w	r2, r3, #32
 800050c:	4908      	ldr	r1, [pc, #32]	; (8000530 <LL_DMA_SetMode+0x48>)
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	440b      	add	r3, r1
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	440b      	add	r3, r1
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4313      	orrs	r3, r2
 8000520:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000522:	bf00      	nop
 8000524:	371c      	adds	r7, #28
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	08002a18 	.word	0x08002a18

08000534 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000534:	b480      	push	{r7}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <LL_DMA_SetPeriphIncMode+0x48>)
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	4413      	add	r3, r2
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	4413      	add	r3, r2
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000558:	4908      	ldr	r1, [pc, #32]	; (800057c <LL_DMA_SetPeriphIncMode+0x48>)
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	440b      	add	r3, r1
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	440b      	add	r3, r1
 8000566:	4619      	mov	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800056e:	bf00      	nop
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	08002a18 	.word	0x08002a18

08000580 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <LL_DMA_SetMemoryIncMode+0x48>)
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	4413      	add	r3, r2
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005a4:	4908      	ldr	r1, [pc, #32]	; (80005c8 <LL_DMA_SetMemoryIncMode+0x48>)
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	440b      	add	r3, r1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	440b      	add	r3, r1
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80005ba:	bf00      	nop
 80005bc:	371c      	adds	r7, #28
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	08002a18 	.word	0x08002a18

080005cc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LL_DMA_SetPeriphSize+0x48>)
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	4413      	add	r3, r2
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80005f0:	4908      	ldr	r1, [pc, #32]	; (8000614 <LL_DMA_SetPeriphSize+0x48>)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	440b      	add	r3, r1
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	440b      	add	r3, r1
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000606:	bf00      	nop
 8000608:	371c      	adds	r7, #28
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	08002a18 	.word	0x08002a18

08000618 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000618:	b480      	push	{r7}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LL_DMA_SetMemorySize+0x48>)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	4413      	add	r3, r2
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	4413      	add	r3, r2
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800063c:	4908      	ldr	r1, [pc, #32]	; (8000660 <LL_DMA_SetMemorySize+0x48>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	440b      	add	r3, r1
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	440b      	add	r3, r1
 800064a:	4619      	mov	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	08002a18 	.word	0x08002a18

08000664 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <LL_DMA_SetChannelPriorityLevel+0x48>)
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	440b      	add	r3, r1
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	440b      	add	r3, r1
 8000696:	4619      	mov	r1, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4313      	orrs	r3, r2
 800069c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800069e:	bf00      	nop
 80006a0:	371c      	adds	r7, #28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	08002a18 	.word	0x08002a18

080006b0 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80006c0:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <LL_DMA_SetDataLength+0x48>)
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	4413      	add	r3, r2
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	0c1b      	lsrs	r3, r3, #16
 80006d2:	041b      	lsls	r3, r3, #16
 80006d4:	4908      	ldr	r1, [pc, #32]	; (80006f8 <LL_DMA_SetDataLength+0x48>)
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	440a      	add	r2, r1
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	4611      	mov	r1, r2
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	440a      	add	r2, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	08002a18 	.word	0x08002a18

080006fc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	2b10      	cmp	r3, #16
 8000712:	d114      	bne.n	800073e <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <LL_DMA_ConfigAddresses+0x78>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4413      	add	r3, r2
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <LL_DMA_ConfigAddresses+0x78>)
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	4413      	add	r3, r2
 8000736:	461a      	mov	r2, r3
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 800073c:	e013      	b.n	8000766 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LL_DMA_ConfigAddresses+0x78>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <LL_DMA_ConfigAddresses+0x78>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	4413      	add	r3, r2
 8000760:	461a      	mov	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	60d3      	str	r3, [r2, #12]
}
 8000766:	bf00      	nop
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	08002a18 	.word	0x08002a18

08000778 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000778:	b480      	push	{r7}
 800077a:	b087      	sub	sp, #28
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	0a9b      	lsrs	r3, r3, #10
 8000788:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800078c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	4413      	add	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007b6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	430a      	orrs	r2, r1
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	371c      	adds	r7, #28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80007da:	4a0c      	ldr	r2, [pc, #48]	; (800080c <LL_DMA_EnableIT_TC+0x40>)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <LL_DMA_EnableIT_TC+0x40>)
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	440a      	add	r2, r1
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	4611      	mov	r1, r2
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	440a      	add	r2, r1
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6013      	str	r3, [r2, #0]
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	08002a18 	.word	0x08002a18

08000810 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 800081e:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <LL_DMA_EnableIT_TE+0x40>)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4413      	add	r3, r2
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <LL_DMA_EnableIT_TE+0x40>)
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	440a      	add	r2, r1
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	4611      	mov	r1, r2
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	440a      	add	r2, r1
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	08002a18 	.word	0x08002a18

08000854 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <LL_RCC_SetADCClockSource+0x44>)
 800085e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	0c1b      	lsrs	r3, r3, #16
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	2103      	movs	r1, #3
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	401a      	ands	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	b2d9      	uxtb	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	f003 031f 	and.w	r3, r3, #31
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	4904      	ldr	r1, [pc, #16]	; (8000898 <LL_RCC_SetADCClockSource+0x44>)
 8000886:	4313      	orrs	r3, r2
 8000888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <MX_ADC1_Init>:
extern __IO uint16_t adc_converted_values[3];
/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	; 0x58
 80008d0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80008d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80008de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 800090e:	4885      	ldr	r0, [pc, #532]	; (8000b24 <MX_ADC1_Init+0x258>)
 8000910:	f7ff ffa0 	bl	8000854 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000914:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000918:	f7ff ffc0 	bl	800089c <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff ffbd 	bl	800089c <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000922:	2301      	movs	r3, #1
 8000924:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f001 faba 	bl	8001eae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800093a:	2302      	movs	r3, #2
 800093c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094e:	f001 faae 	bl	8001eae <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8000952:	2205      	movs	r2, #5
 8000954:	2100      	movs	r1, #0
 8000956:	4874      	ldr	r0, [pc, #464]	; (8000b28 <MX_ADC1_Init+0x25c>)
 8000958:	f7ff ff0e 	bl	8000778 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	4871      	ldr	r0, [pc, #452]	; (8000b28 <MX_ADC1_Init+0x25c>)
 8000962:	f7ff fd99 	bl	8000498 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	486f      	ldr	r0, [pc, #444]	; (8000b28 <MX_ADC1_Init+0x25c>)
 800096c:	f7ff fe7a 	bl	8000664 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000970:	2220      	movs	r2, #32
 8000972:	2100      	movs	r1, #0
 8000974:	486c      	ldr	r0, [pc, #432]	; (8000b28 <MX_ADC1_Init+0x25c>)
 8000976:	f7ff fdb7 	bl	80004e8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	486a      	ldr	r0, [pc, #424]	; (8000b28 <MX_ADC1_Init+0x25c>)
 8000980:	f7ff fdd8 	bl	8000534 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	2100      	movs	r1, #0
 8000988:	4867      	ldr	r0, [pc, #412]	; (8000b28 <MX_ADC1_Init+0x25c>)
 800098a:	f7ff fdf9 	bl	8000580 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800098e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000992:	2100      	movs	r1, #0
 8000994:	4864      	ldr	r0, [pc, #400]	; (8000b28 <MX_ADC1_Init+0x25c>)
 8000996:	f7ff fe19 	bl	80005cc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 800099a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800099e:	2100      	movs	r1, #0
 80009a0:	4861      	ldr	r0, [pc, #388]	; (8000b28 <MX_ADC1_Init+0x25c>)
 80009a2:	f7ff fe39 	bl	8000618 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetPeriphRequest(DMA1,  LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 80009a6:	2205      	movs	r2, #5
 80009a8:	2100      	movs	r1, #0
 80009aa:	485f      	ldr	r0, [pc, #380]	; (8000b28 <MX_ADC1_Init+0x25c>)
 80009ac:	f7ff fee4 	bl	8000778 <LL_DMA_SetPeriphRequest>
  
  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(DMA1,
 80009b0:	2100      	movs	r1, #0
 80009b2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009b6:	f7ff fc2f 	bl	8000218 <LL_ADC_DMA_GetRegAddr>
 80009ba:	4602      	mov	r2, r0
 80009bc:	495b      	ldr	r1, [pc, #364]	; (8000b2c <MX_ADC1_Init+0x260>)
 80009be:	2300      	movs	r3, #0
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	460b      	mov	r3, r1
 80009c4:	2100      	movs	r1, #0
 80009c6:	4858      	ldr	r0, [pc, #352]	; (8000b28 <MX_ADC1_Init+0x25c>)
 80009c8:	f7ff fe98 	bl	80006fc <LL_DMA_ConfigAddresses>
                         LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
                         (uint32_t)&adc_converted_values,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
  
  /* Set DMA transfer size */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 3);
 80009cc:	2203      	movs	r2, #3
 80009ce:	2100      	movs	r1, #0
 80009d0:	4855      	ldr	r0, [pc, #340]	; (8000b28 <MX_ADC1_Init+0x25c>)
 80009d2:	f7ff fe6d 	bl	80006b0 <LL_DMA_SetDataLength>
  
  /* Enable DMA transfer interruption: transfer complete */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 80009d6:	2100      	movs	r1, #0
 80009d8:	4853      	ldr	r0, [pc, #332]	; (8000b28 <MX_ADC1_Init+0x25c>)
 80009da:	f7ff fef7 	bl	80007cc <LL_DMA_EnableIT_TC>
  
  /* Enable DMA transfer interruption: transfer error */
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 80009de:	2100      	movs	r1, #0
 80009e0:	4851      	ldr	r0, [pc, #324]	; (8000b28 <MX_ADC1_Init+0x25c>)
 80009e2:	f7ff ff15 	bl	8000810 <LL_DMA_EnableIT_TE>
  
  /*## Activation of DMA #####################################################*/
  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 80009e6:	2100      	movs	r1, #0
 80009e8:	484f      	ldr	r0, [pc, #316]	; (8000b28 <MX_ADC1_Init+0x25c>)
 80009ea:	f7ff fd33 	bl	8000454 <LL_DMA_EnableChannel>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80009ee:	2300      	movs	r3, #0
 80009f0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80009fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a04:	f001 f898 	bl	8001b38 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM8_TRGO;
 8000a08:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a2c:	f001 f8aa 	bl	8001b84 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a36:	f7ff fc1a 	bl	800026e <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a40:	f7ff fccc 	bl	80003dc <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a44:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000a48:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4836      	ldr	r0, [pc, #216]	; (8000b30 <MX_ADC1_Init+0x264>)
 8000a56:	f001 f82f 	bl	8001ab8 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC1, LL_ADC_REG_TRIG_EXT_RISING);
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a62:	f7ff fc29 	bl	80002b8 <LL_ADC_REG_SetTriggerEdge>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000a66:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a6a:	f7ff fccc 	bl	8000406 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000a6e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a72:	f7ff fcda 	bl	800042a <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_ADC1_Init+0x268>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	099b      	lsrs	r3, r3, #6
 8000a7c:	4a2e      	ldr	r2, [pc, #184]	; (8000b38 <MX_ADC1_Init+0x26c>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	099a      	lsrs	r2, r3, #6
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <MX_ADC1_Init+0x270>)
 8000a90:	fba3 2302 	umull	r2, r3, r3, r2
 8000a94:	08db      	lsrs	r3, r3, #3
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000a98:	e002      	b.n	8000aa0 <MX_ADC1_Init+0x1d4>
  {
    wait_loop_index--;
 8000a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f9      	bne.n	8000a9a <MX_ADC1_Init+0x1ce>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000aa6:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <MX_ADC1_Init+0x274>)
 8000aa8:	2106      	movs	r1, #6
 8000aaa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000aae:	f7ff fc16 	bl	80002de <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	4922      	ldr	r1, [pc, #136]	; (8000b40 <MX_ADC1_Init+0x274>)
 8000ab6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000aba:	f7ff fc3c 	bl	8000336 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000abe:	227f      	movs	r2, #127	; 0x7f
 8000ac0:	491f      	ldr	r1, [pc, #124]	; (8000b40 <MX_ADC1_Init+0x274>)
 8000ac2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ac6:	f7ff fc61 	bl	800038c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8000aca:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <MX_ADC1_Init+0x278>)
 8000acc:	210c      	movs	r1, #12
 8000ace:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ad2:	f7ff fc04 	bl	80002de <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	491a      	ldr	r1, [pc, #104]	; (8000b44 <MX_ADC1_Init+0x278>)
 8000ada:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ade:	f7ff fc2a 	bl	8000336 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000ae2:	227f      	movs	r2, #127	; 0x7f
 8000ae4:	4917      	ldr	r1, [pc, #92]	; (8000b44 <MX_ADC1_Init+0x278>)
 8000ae6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000aea:	f7ff fc4f 	bl	800038c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_VREFINT);
 8000aee:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <MX_ADC1_Init+0x27c>)
 8000af0:	2112      	movs	r1, #18
 8000af2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000af6:	f7ff fbf2 	bl	80002de <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8000afa:	2206      	movs	r2, #6
 8000afc:	4912      	ldr	r1, [pc, #72]	; (8000b48 <MX_ADC1_Init+0x27c>)
 8000afe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b02:	f7ff fc18 	bl	8000336 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 8000b06:	227f      	movs	r2, #127	; 0x7f
 8000b08:	490f      	ldr	r1, [pc, #60]	; (8000b48 <MX_ADC1_Init+0x27c>)
 8000b0a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b0e:	f7ff fc3d 	bl	800038c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8000b12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_ADC1_Init+0x264>)
 8000b18:	f7ff fb96 	bl	8000248 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3750      	adds	r7, #80	; 0x50
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	001c0002 	.word	0x001c0002
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	20000020 	.word	0x20000020
 8000b30:	50000300 	.word	0x50000300
 8000b34:	20000000 	.word	0x20000000
 8000b38:	053e2d63 	.word	0x053e2d63
 8000b3c:	cccccccd 	.word	0xcccccccd
 8000b40:	04300002 	.word	0x04300002
 8000b44:	08600004 	.word	0x08600004
 8000b48:	cb840000 	.word	0xcb840000

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <LL_AHB1_GRP1_EnableClock>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000

08000c90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8000c94:	2004      	movs	r0, #4
 8000c96:	f7ff ffe3 	bl	8000c60 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ffe0 	bl	8000c60 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ca0:	f7ff ff54 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ffa4 	bl	8000bf8 <NVIC_EncodePriority>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	200b      	movs	r0, #11
 8000cb6:	f7ff ff75 	bl	8000ba4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cba:	200b      	movs	r0, #11
 8000cbc:	f7ff ff54 	bl	8000b68 <__NVIC_EnableIRQ>

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <LL_AHB2_GRP1_EnableClock>:
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff ffe3 	bl	8000cc4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff ffe0 	bl	8000cc4 <LL_AHB2_GRP1_EnableClock>

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <__NVIC_SetPriorityGrouping>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_SetPriority>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LL_ADC_DisableDeepPowerDown>:
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6093      	str	r3, [r2, #8]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_ADC_EnableInternalRegulator>:
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000e5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	609a      	str	r2, [r3, #8]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d101      	bne.n	8000eb2 <LL_ADC_IsEnabled+0x18>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <LL_ADC_IsEnabled+0x1a>
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d101      	bne.n	8000ed8 <LL_ADC_IsDisableOngoing+0x18>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <LL_ADC_IsDisableOngoing+0x1a>
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000f02:	4313      	orrs	r3, r2
 8000f04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f2c:	d101      	bne.n	8000f32 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f54:	f043 0204 	orr.w	r2, r3, #4
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d101      	bne.n	8000f80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_RCC_HSI_Enable>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <LL_RCC_HSI_Enable+0x1c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <LL_RCC_HSI_Enable+0x1c>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <LL_RCC_HSI_IsReady>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <LL_RCC_HSI_IsReady+0x24>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe4:	d101      	bne.n	8000fea <LL_RCC_HSI_IsReady+0x16>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <LL_RCC_HSI_IsReady+0x18>
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <LL_RCC_HSI_SetCalibTrimming>:
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	061b      	lsls	r3, r3, #24
 8001010:	4904      	ldr	r1, [pc, #16]	; (8001024 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <LL_RCC_SetSysClkSource>:
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <LL_RCC_SetSysClkSource+0x24>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f023 0203 	bic.w	r2, r3, #3
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <LL_RCC_SetSysClkSource+0x24>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000

08001050 <LL_RCC_GetSysClkSource>:
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <LL_RCC_GetSysClkSource+0x18>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <LL_RCC_SetAHBPrescaler>:
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <LL_RCC_SetAHBPrescaler+0x24>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800107c:	4904      	ldr	r1, [pc, #16]	; (8001090 <LL_RCC_SetAHBPrescaler+0x24>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4313      	orrs	r3, r2
 8001082:	608b      	str	r3, [r1, #8]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000

08001094 <LL_RCC_SetAPB1Prescaler>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010a4:	4904      	ldr	r1, [pc, #16]	; (80010b8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000

080010bc <LL_RCC_SetAPB2Prescaler>:
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010cc:	4904      	ldr	r1, [pc, #16]	; (80010e0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000

080010e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <LL_RCC_PLL_Enable+0x1c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <LL_RCC_PLL_Enable+0x1c>)
 80010ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <LL_RCC_PLL_IsReady+0x24>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001114:	d101      	bne.n	800111a <LL_RCC_PLL_IsReady+0x16>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <LL_RCC_PLL_IsReady+0x18>
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001140:	4013      	ands	r3, r2
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	4311      	orrs	r1, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	0212      	lsls	r2, r2, #8
 800114c:	4311      	orrs	r1, r2
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	4904      	ldr	r1, [pc, #16]	; (8001164 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001154:	4313      	orrs	r3, r2
 8001156:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40021000 	.word	0x40021000
 8001168:	f9ff800c 	.word	0xf9ff800c

0800116c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001196:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000

080011bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000

080011ec <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <LL_FLASH_SetLatency+0x24>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 020f 	bic.w	r2, r3, #15
 80011fc:	4904      	ldr	r1, [pc, #16]	; (8001210 <LL_FLASH_SetLatency+0x24>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40022000 	.word	0x40022000

08001214 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <LL_FLASH_GetLatency+0x18>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 030f 	and.w	r3, r3, #15
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40022000 	.word	0x40022000

08001230 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <LL_PWR_EnableRange1BoostMode+0x20>)
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <LL_PWR_EnableRange1BoostMode+0x20>)
 800123c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40007000 	.word	0x40007000

08001254 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001262:	6093      	str	r3, [r2, #8]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40007000 	.word	0x40007000

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff ff9f 	bl	80011bc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800127e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001282:	f7ff ff83 	bl	800118c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001286:	2003      	movs	r0, #3
 8001288:	f7ff fd3e 	bl	8000d08 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800128c:	f7ff fd60 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8001290:	4603      	mov	r3, r0
 8001292:	2200      	movs	r2, #0
 8001294:	210f      	movs	r1, #15
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fd92 	bl	8000dc0 <NVIC_EncodePriority>
 800129c:	4603      	mov	r3, r0
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff fd62 	bl	8000d6c <__NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 80012a8:	f7ff ffd4 	bl	8001254 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ac:	f000 f86a 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b0:	f7ff fd20 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b4:	f7ff fcec 	bl	8000c90 <MX_DMA_Init>
  MX_ADC1_Init();
 80012b8:	f7ff fb08 	bl	80008cc <MX_ADC1_Init>
  MX_TIM8_Init();
 80012bc:	f000 fafa 	bl	80018b4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	Activate_ADC();
 80012c0:	f000 f8c0 	bl	8001444 <Activate_ADC>
	
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 80012c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012c8:	f7ff fde7 	bl	8000e9a <LL_ADC_IsEnabled>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d111      	bne.n	80012f6 <main+0x82>
      (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 80012d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012d6:	f7ff fdf3 	bl	8000ec0 <LL_ADC_IsDisableOngoing>
 80012da:	4603      	mov	r3, r0
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10a      	bne.n	80012f6 <main+0x82>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0)   )
 80012e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012e4:	f7ff fe40 	bl	8000f68 <LL_ADC_REG_IsConversionOngoing>
 80012e8:	4603      	mov	r3, r0
      (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d103      	bne.n	80012f6 <main+0x82>
  {
    LL_ADC_REG_StartConversion(ADC1);
 80012ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012f2:	f7ff fe25 	bl	8000f40 <LL_ADC_REG_StartConversion>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(is_dma_transfer_completed == 1)
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <main+0xf4>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d1fa      	bne.n	80012f6 <main+0x82>
    {
      vrefint_converted_value = adc_converted_values[2];
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <main+0xf8>)
 8001302:	889b      	ldrh	r3, [r3, #4]
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <main+0xfc>)
 8001308:	801a      	strh	r2, [r3, #0]
      vdda_milli_volt = (VREFINT_CAL_VREF * (*VREFINT_CAL_ADDR)) / vrefint_converted_value;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <main+0x100>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	4a15      	ldr	r2, [pc, #84]	; (8001370 <main+0xfc>)
 800131a:	8812      	ldrh	r2, [r2, #0]
 800131c:	b292      	uxth	r2, r2
 800131e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <main+0x104>)
 8001326:	801a      	strh	r2, [r3, #0]
      channel1_converted_value = (int)((float)vdda_milli_volt * (float)((float)adc_converted_values[0] / 4096.0F));
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <main+0x104>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <main+0xf8>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001344:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 800137c <main+0x108>
 8001348:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001354:	ee17 3a90 	vmov	r3, s15
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <main+0x10c>)
 800135c:	801a      	strh	r2, [r3, #0]

      is_dma_transfer_completed = 0;
 800135e:	4b02      	ldr	r3, [pc, #8]	; (8001368 <main+0xf4>)
 8001360:	2200      	movs	r2, #0
 8001362:	801a      	strh	r2, [r3, #0]
    if(is_dma_transfer_completed == 1)
 8001364:	e7c7      	b.n	80012f6 <main+0x82>
 8001366:	bf00      	nop
 8001368:	2000002a 	.word	0x2000002a
 800136c:	20000020 	.word	0x20000020
 8001370:	20000026 	.word	0x20000026
 8001374:	1fff75aa 	.word	0x1fff75aa
 8001378:	20000028 	.word	0x20000028
 800137c:	45800000 	.word	0x45800000
 8001380:	2000002c 	.word	0x2000002c

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001388:	2004      	movs	r0, #4
 800138a:	f7ff ff2f 	bl	80011ec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 800138e:	bf00      	nop
 8001390:	f7ff ff40 	bl	8001214 <LL_FLASH_GetLatency>
 8001394:	4603      	mov	r3, r0
 8001396:	2b04      	cmp	r3, #4
 8001398:	d1fa      	bne.n	8001390 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 800139a:	f7ff ff49 	bl	8001230 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 800139e:	f7ff fe09 	bl	8000fb4 <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80013a2:	bf00      	nop
 80013a4:	f7ff fe16 	bl	8000fd4 <LL_RCC_HSI_IsReady>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d1fa      	bne.n	80013a4 <SystemClock_Config+0x20>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 80013ae:	2040      	movs	r0, #64	; 0x40
 80013b0:	f7ff fe24 	bl	8000ffc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 80013b4:	2300      	movs	r3, #0
 80013b6:	2255      	movs	r2, #85	; 0x55
 80013b8:	2130      	movs	r1, #48	; 0x30
 80013ba:	2002      	movs	r0, #2
 80013bc:	f7ff feb6 	bl	800112c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80013c0:	f7ff fed4 	bl	800116c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80013c4:	f7ff fe8e 	bl	80010e4 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80013c8:	bf00      	nop
 80013ca:	f7ff fe9b 	bl	8001104 <LL_RCC_PLL_IsReady>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d1fa      	bne.n	80013ca <SystemClock_Config+0x46>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f7ff fe27 	bl	8001028 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80013da:	2080      	movs	r0, #128	; 0x80
 80013dc:	f7ff fe46 	bl	800106c <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80013e0:	bf00      	nop
 80013e2:	f7ff fe35 	bl	8001050 <LL_RCC_GetSysClkSource>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	d1fa      	bne.n	80013e2 <SystemClock_Config+0x5e>
  {
  }

  /* Insure 1�s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <SystemClock_Config+0xb4>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <SystemClock_Config+0xb4>)
 80013f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f6:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <SystemClock_Config+0xb8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0f      	ldr	r2, [pc, #60]	; (800143c <SystemClock_Config+0xb8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <SystemClock_Config+0xb8>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  while(DWT->CYCCNT < 100);
 800140a:	bf00      	nop
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <SystemClock_Config+0xb8>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b63      	cmp	r3, #99	; 0x63
 8001412:	d9fb      	bls.n	800140c <SystemClock_Config+0x88>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fe29 	bl	800106c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fe3a 	bl	8001094 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fe4b 	bl	80010bc <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <SystemClock_Config+0xbc>)
 8001428:	f001 faa0 	bl	800296c <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <SystemClock_Config+0xbc>)
 800142e:	f001 faab 	bl	8002988 <LL_SetSystemCoreClock>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000edf0 	.word	0xe000edf0
 800143c:	e0001000 	.word	0xe0001000
 8001440:	0a21fe80 	.word	0x0a21fe80

08001444 <Activate_ADC>:

/* USER CODE BEGIN 4 */
#define ADC_DELAY_CALIB_ENABLE_CPU_CYCLES  (LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES * 32)

void Activate_ADC(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  #if (USE_TIMEOUT == 1)
  uint32_t Timeout = 0U; /* Variable used for timeout management */
  #endif /* USE_TIMEOUT */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 800144e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001452:	f7ff fd22 	bl	8000e9a <LL_ADC_IsEnabled>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d141      	bne.n	80014e0 <Activate_ADC+0x9c>
  {
    LL_ADC_DisableDeepPowerDown(ADC1);
 800145c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001460:	f7ff fce1 	bl	8000e26 <LL_ADC_DisableDeepPowerDown>
    LL_ADC_EnableInternalRegulator(ADC1);
 8001464:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001468:	f7ff fcef 	bl	8000e4a <LL_ADC_EnableInternalRegulator>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <Activate_ADC+0xa4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	099b      	lsrs	r3, r3, #6
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <Activate_ADC+0xa8>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	099a      	lsrs	r2, r3, #6
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	461a      	mov	r2, r3
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <Activate_ADC+0xac>)
 8001486:	fba3 2302 	umull	r2, r3, r3, r2
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	607b      	str	r3, [r7, #4]
    while(wait_loop_index != 0)
 800148e:	e002      	b.n	8001496 <Activate_ADC+0x52>
    {
      wait_loop_index--;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
    while(wait_loop_index != 0)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f9      	bne.n	8001490 <Activate_ADC+0x4c>
    }
    
    LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 800149c:	217f      	movs	r1, #127	; 0x7f
 800149e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014a2:	f7ff fd20 	bl	8000ee6 <LL_ADC_StartCalibration>
    
    #if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
    #endif /* USE_TIMEOUT */
    
    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 80014a6:	bf00      	nop
 80014a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014ac:	f7ff fd34 	bl	8000f18 <LL_ADC_IsCalibrationOnGoing>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f8      	bne.n	80014a8 <Activate_ADC+0x64>
        }
      }
    #endif /* USE_TIMEOUT */
    }
    
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 80014b6:	2340      	movs	r3, #64	; 0x40
 80014b8:	607b      	str	r3, [r7, #4]
    while(wait_loop_index != 0)
 80014ba:	e002      	b.n	80014c2 <Activate_ADC+0x7e>
    {
      wait_loop_index--;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
    while(wait_loop_index != 0)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f9      	bne.n	80014bc <Activate_ADC+0x78>
    }
    
    /* Enable ADC */
    LL_ADC_Enable(ADC1);
 80014c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014cc:	f7ff fcd1 	bl	8000e72 <LL_ADC_Enable>
    /* Poll for ADC ready to convert */
    #if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
    #endif /* USE_TIMEOUT */
    
    while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80014d0:	bf00      	nop
 80014d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014d6:	f7ff fd5a 	bl	8000f8e <LL_ADC_IsActiveFlag_ADRDY>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f8      	beq.n	80014d2 <Activate_ADC+0x8e>
        }
      }
    #endif /* USE_TIMEOUT */
    }
  }
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	053e2d63 	.word	0x053e2d63
 80014f0:	cccccccd 	.word	0xcccccccd

080014f4 <LL_DMA_IsActiveFlag_TC1>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b02      	cmp	r3, #2
 8001506:	d101      	bne.n	800150c <LL_DMA_IsActiveFlag_TC1+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_DMA_IsActiveFlag_TC1+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_DMA_ClearFlag_TC1>:
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2202      	movs	r2, #2
 8001526:	605a      	str	r2, [r3, #4]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <DMA1_Channel1_IRQHandler+0x20>)
 8001592:	f7ff ffaf 	bl	80014f4 <LL_DMA_IsActiveFlag_TC1>
 8001596:	4603      	mov	r3, r0
 8001598:	2b01      	cmp	r3, #1
 800159a:	d105      	bne.n	80015a8 <DMA1_Channel1_IRQHandler+0x1c>
  {
    LL_DMA_ClearFlag_TC1(DMA1);
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <DMA1_Channel1_IRQHandler+0x20>)
 800159e:	f7ff ffbc 	bl	800151a <LL_DMA_ClearFlag_TC1>
    is_dma_transfer_completed = 1;
 80015a2:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <DMA1_Channel1_IRQHandler+0x24>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020000 	.word	0x40020000
 80015b0:	2000002a 	.word	0x2000002a

080015b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <LL_AHB2_GRP1_EnableClock>:
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4013      	ands	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000

08001608 <LL_APB2_GRP1_EnableClock>:
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001612:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001614:	4907      	ldr	r1, [pc, #28]	; (8001634 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <LL_APB2_GRP1_EnableClock+0x2c>)
 800161e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4013      	ands	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000

08001638 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1a      	ldr	r2, [r3, #32]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	621a      	str	r2, [r3, #32]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d02e      	beq.n	800170a <LL_TIM_OC_DisableFast+0x6e>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d029      	beq.n	8001706 <LL_TIM_OC_DisableFast+0x6a>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d024      	beq.n	8001702 <LL_TIM_OC_DisableFast+0x66>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	d01f      	beq.n	80016fe <LL_TIM_OC_DisableFast+0x62>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c4:	d019      	beq.n	80016fa <LL_TIM_OC_DisableFast+0x5e>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016cc:	d013      	beq.n	80016f6 <LL_TIM_OC_DisableFast+0x5a>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d4:	d00d      	beq.n	80016f2 <LL_TIM_OC_DisableFast+0x56>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016dc:	d007      	beq.n	80016ee <LL_TIM_OC_DisableFast+0x52>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d101      	bne.n	80016ea <LL_TIM_OC_DisableFast+0x4e>
 80016e6:	2308      	movs	r3, #8
 80016e8:	e010      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 80016ea:	2309      	movs	r3, #9
 80016ec:	e00e      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 80016ee:	2307      	movs	r3, #7
 80016f0:	e00c      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 80016f2:	2306      	movs	r3, #6
 80016f4:	e00a      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e008      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 80016fa:	2304      	movs	r3, #4
 80016fc:	e006      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 80016fe:	2303      	movs	r3, #3
 8001700:	e004      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <LL_TIM_OC_DisableFast+0x70>
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3318      	adds	r3, #24
 8001712:	4619      	mov	r1, r3
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <LL_TIM_OC_DisableFast+0xa8>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	440b      	add	r3, r1
 800171c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	4908      	ldr	r1, [pc, #32]	; (8001748 <LL_TIM_OC_DisableFast+0xac>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	4619      	mov	r1, r3
 800172a:	2304      	movs	r3, #4
 800172c:	408b      	lsls	r3, r1
 800172e:	43db      	mvns	r3, r3
 8001730:	401a      	ands	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	601a      	str	r2, [r3, #0]

}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	08002a20 	.word	0x08002a20
 8001748:	08002a2c 	.word	0x08002a2c

0800174c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d02e      	beq.n	80017ba <LL_TIM_OC_EnablePreload+0x6e>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d029      	beq.n	80017b6 <LL_TIM_OC_EnablePreload+0x6a>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b10      	cmp	r3, #16
 8001766:	d024      	beq.n	80017b2 <LL_TIM_OC_EnablePreload+0x66>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b40      	cmp	r3, #64	; 0x40
 800176c:	d01f      	beq.n	80017ae <LL_TIM_OC_EnablePreload+0x62>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001774:	d019      	beq.n	80017aa <LL_TIM_OC_EnablePreload+0x5e>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177c:	d013      	beq.n	80017a6 <LL_TIM_OC_EnablePreload+0x5a>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001784:	d00d      	beq.n	80017a2 <LL_TIM_OC_EnablePreload+0x56>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800178c:	d007      	beq.n	800179e <LL_TIM_OC_EnablePreload+0x52>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d101      	bne.n	800179a <LL_TIM_OC_EnablePreload+0x4e>
 8001796:	2308      	movs	r3, #8
 8001798:	e010      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 800179a:	2309      	movs	r3, #9
 800179c:	e00e      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 800179e:	2307      	movs	r3, #7
 80017a0:	e00c      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00a      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e008      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e006      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x70>
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3318      	adds	r3, #24
 80017c2:	4619      	mov	r1, r3
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <LL_TIM_OC_EnablePreload+0xa4>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	440b      	add	r3, r1
 80017cc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <LL_TIM_OC_EnablePreload+0xa8>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	4619      	mov	r1, r3
 80017da:	2308      	movs	r3, #8
 80017dc:	408b      	lsls	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	08002a20 	.word	0x08002a20
 80017f4:	08002a2c 	.word	0x08002a2c

080017f8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800180a:	f023 0307 	bic.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	605a      	str	r2, [r3, #4]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <MX_TIM8_Init>:

/* USER CODE END 0 */

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0a0      	sub	sp, #128	; 0x80
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80018ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80018ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ce:	2220      	movs	r2, #32
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 f88c 	bl	80029f0 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	2230      	movs	r2, #48	; 0x30
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f885 	bl	80029f0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 80018f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018fa:	f7ff fe85 	bl	8001608 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 170;
 80018fe:	23aa      	movs	r3, #170	; 0xaa
 8001900:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001904:	2300      	movs	r3, #0
 8001906:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 1000;
 8001908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190c:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8001916:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800191a:	4619      	mov	r1, r3
 800191c:	483c      	ldr	r0, [pc, #240]	; (8001a10 <MX_TIM8_Init+0x15c>)
 800191e:	f000 fbc5 	bl	80020ac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8001922:	483b      	ldr	r0, [pc, #236]	; (8001a10 <MX_TIM8_Init+0x15c>)
 8001924:	f7ff fe98 	bl	8001658 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM8, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001928:	2100      	movs	r1, #0
 800192a:	4839      	ldr	r0, [pc, #228]	; (8001a10 <MX_TIM8_Init+0x15c>)
 800192c:	f7ff ff64 	bl	80017f8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH1);
 8001930:	2101      	movs	r1, #1
 8001932:	4837      	ldr	r0, [pc, #220]	; (8001a10 <MX_TIM8_Init+0x15c>)
 8001934:	f7ff ff0a 	bl	800174c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001938:	2360      	movs	r3, #96	; 0x60
 800193a:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 300;
 8001944:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001948:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800194a:	2300      	movs	r3, #0
 800194c:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800195a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195e:	461a      	mov	r2, r3
 8001960:	2101      	movs	r1, #1
 8001962:	482b      	ldr	r0, [pc, #172]	; (8001a10 <MX_TIM8_Init+0x15c>)
 8001964:	f000 fc2c 	bl	80021c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH1);
 8001968:	2101      	movs	r1, #1
 800196a:	4829      	ldr	r0, [pc, #164]	; (8001a10 <MX_TIM8_Init+0x15c>)
 800196c:	f7ff fe96 	bl	800169c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_OC1REF);
 8001970:	2140      	movs	r1, #64	; 0x40
 8001972:	4827      	ldr	r0, [pc, #156]	; (8001a10 <MX_TIM8_Init+0x15c>)
 8001974:	f7ff ff55 	bl	8001822 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8001978:	2100      	movs	r1, #0
 800197a:	4825      	ldr	r0, [pc, #148]	; (8001a10 <MX_TIM8_Init+0x15c>)
 800197c:	f7ff ff66 	bl	800184c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8001980:	4823      	ldr	r0, [pc, #140]	; (8001a10 <MX_TIM8_Init+0x15c>)
 8001982:	f7ff ff76 	bl	8001872 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 80019ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4812      	ldr	r0, [pc, #72]	; (8001a10 <MX_TIM8_Init+0x15c>)
 80019c8:	f000 fc5a 	bl	8002280 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */
  LL_TIM_EnableCounter(TIM8);
 80019cc:	4810      	ldr	r0, [pc, #64]	; (8001a10 <MX_TIM8_Init+0x15c>)
 80019ce:	f7ff fe33 	bl	8001638 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH1);
 80019d2:	2101      	movs	r1, #1
 80019d4:	480e      	ldr	r0, [pc, #56]	; (8001a10 <MX_TIM8_Init+0x15c>)
 80019d6:	f7ff fe4f 	bl	8001678 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableAllOutputs(TIM8);
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_TIM8_Init+0x15c>)
 80019dc:	f7ff ff59 	bl	8001892 <LL_TIM_EnableAllOutputs>
  /* USER CODE END TIM8_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80019e0:	2004      	movs	r0, #4
 80019e2:	f7ff fdf9 	bl	80015d8 <LL_AHB2_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019ea:	2302      	movs	r3, #2
 80019ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80019fa:	2304      	movs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_TIM8_Init+0x160>)
 8001a04:	f000 fa53 	bl	8001eae <LL_GPIO_Init>

}
 8001a08:	bf00      	nop
 8001a0a:	3780      	adds	r7, #128	; 0x80
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40013400 	.word	0x40013400
 8001a14:	48000800 	.word	0x48000800

08001a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <LoopForever+0xe>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a34:	4c0b      	ldr	r4, [pc, #44]	; (8001a64 <LoopForever+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a42:	f7ff fdb7 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f000 ffaf 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a4a:	f7ff fc13 	bl	8001274 <main>

08001a4e <LoopForever>:

LoopForever:
    b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   r0, =_estack
 8001a50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001a5c:	08002a40 	.word	0x08002a40
  ldr r2, =_sbss
 8001a60:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001a64:	20000030 	.word	0x20000030

08001a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_2_IRQHandler>

08001a6a <LL_ADC_REG_SetSequencerLength>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	f023 020f 	bic.w	r2, r3, #15
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_IsEnabled>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <LL_ADC_IsEnabled+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_ADC_IsEnabled+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8001ac6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001aca:	f7ff ffe1 	bl	8001a90 <LL_ADC_IsEnabled>
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4817      	ldr	r0, [pc, #92]	; (8001b30 <LL_ADC_CommonInit+0x78>)
 8001ad2:	f7ff ffdd 	bl	8001a90 <LL_ADC_IsEnabled>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4323      	orrs	r3, r4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d120      	bne.n	8001b20 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d012      	beq.n	8001b0c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <LL_ADC_CommonInit+0x7c>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	6811      	ldr	r1, [r2, #0]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	6852      	ldr	r2, [r2, #4]
 8001af6:	4311      	orrs	r1, r2
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	6892      	ldr	r2, [r2, #8]
 8001afc:	4311      	orrs	r1, r2
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	68d2      	ldr	r2, [r2, #12]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	e00b      	b.n	8001b24 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <LL_ADC_CommonInit+0x7c>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	e001      	b.n	8001b24 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	50000100 	.word	0x50000100
 8001b34:	ffc030e0 	.word	0xffc030e0

08001b38 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <LL_ADC_IsEnabled>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d111      	bne.n	8001b76 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b5a:	f023 0318 	bic.w	r3, r3, #24
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	6811      	ldr	r1, [r2, #0]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	6852      	ldr	r2, [r2, #4]
 8001b66:	4311      	orrs	r1, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	6892      	ldr	r2, [r2, #8]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	e001      	b.n	8001b7a <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff7c 	bl	8001a90 <LL_ADC_IsEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d132      	bne.n	8001c04 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d015      	beq.n	8001bd2 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <LL_ADC_REG_Init+0x90>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	6811      	ldr	r1, [r2, #0]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	6892      	ldr	r2, [r2, #8]
 8001bb6:	4311      	orrs	r1, r2
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	68d2      	ldr	r2, [r2, #12]
 8001bbc:	4311      	orrs	r1, r2
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	6912      	ldr	r2, [r2, #16]
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	6952      	ldr	r2, [r2, #20]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	e011      	b.n	8001bf6 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <LL_ADC_REG_Init+0x90>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	6811      	ldr	r1, [r2, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	68d2      	ldr	r2, [r2, #12]
 8001be2:	4311      	orrs	r1, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	6912      	ldr	r2, [r2, #16]
 8001be8:	4311      	orrs	r1, r2
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6952      	ldr	r2, [r2, #20]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff34 	bl	8001a6a <LL_ADC_REG_SetSequencerLength>
 8001c02:	e001      	b.n	8001c08 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	fff0c01c 	.word	0xfff0c01c

08001c18 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b08b      	sub	sp, #44	; 0x2c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e003      	b.n	8001c4a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	401a      	ands	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	61fb      	str	r3, [r7, #28]
  return result;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e003      	b.n	8001c78 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	372c      	adds	r7, #44	; 0x2c
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	605a      	str	r2, [r3, #4]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b08b      	sub	sp, #44	; 0x2c
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	613b      	str	r3, [r7, #16]
  return result;
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e003      	b.n	8001cf4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	61fb      	str	r3, [r7, #28]
  return result;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001d16:	2320      	movs	r3, #32
 8001d18:	e003      	b.n	8001d22 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001d30:	bf00      	nop
 8001d32:	372c      	adds	r7, #44	; 0x2c
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b08b      	sub	sp, #44	; 0x2c
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	613b      	str	r3, [r7, #16]
  return result;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001d62:	2320      	movs	r3, #32
 8001d64:	e003      	b.n	8001d6e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2103      	movs	r1, #3
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	401a      	ands	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	61fb      	str	r3, [r7, #28]
  return result;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001d90:	2320      	movs	r3, #32
 8001d92:	e003      	b.n	8001d9c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	431a      	orrs	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	60da      	str	r2, [r3, #12]
}
 8001daa:	bf00      	nop
 8001dac:	372c      	adds	r7, #44	; 0x2c
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b08b      	sub	sp, #44	; 0x2c
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a1a      	ldr	r2, [r3, #32]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	613b      	str	r3, [r7, #16]
  return result;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e003      	b.n	8001de8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	210f      	movs	r1, #15
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	401a      	ands	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	61fb      	str	r3, [r7, #28]
  return result;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e003      	b.n	8001e16 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001e24:	bf00      	nop
 8001e26:	372c      	adds	r7, #44	; 0x2c
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	613b      	str	r3, [r7, #16]
  return result;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e003      	b.n	8001e64 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	210f      	movs	r1, #15
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	401a      	ands	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	61fb      	str	r3, [r7, #28]
  return result;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e003      	b.n	8001e94 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001ea2:	bf00      	nop
 8001ea4:	372c      	adds	r7, #44	; 0x2c
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b088      	sub	sp, #32
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	60fb      	str	r3, [r7, #12]
  return result;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <LL_GPIO_Init+0x26>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e003      	b.n	8001edc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ede:	e048      	b.n	8001f72 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03a      	beq.n	8001f6c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d003      	beq.n	8001f06 <LL_GPIO_Init+0x58>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d10e      	bne.n	8001f24 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	69b9      	ldr	r1, [r7, #24]
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fed7 	bl	8001cc2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff feb7 	bl	8001c92 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	69b9      	ldr	r1, [r7, #24]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff05 	bl	8001d3c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d111      	bne.n	8001f5e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2bff      	cmp	r3, #255	; 0xff
 8001f3e:	d807      	bhi.n	8001f50 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	461a      	mov	r2, r3
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff34 	bl	8001db6 <LL_GPIO_SetAFPin_0_7>
 8001f4e:	e006      	b.n	8001f5e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	461a      	mov	r2, r3
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff69 	bl	8001e30 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	461a      	mov	r2, r3
 8001f64:	69b9      	ldr	r1, [r7, #24]
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fe56 	bl	8001c18 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1af      	bne.n	8001ee0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <LL_TIM_SetPrescaler>:
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_TIM_SetAutoReload>:
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_TIM_SetRepetitionCounter>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_TIM_OC_SetCompareCH1>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_TIM_OC_SetCompareCH2>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_TIM_OC_SetCompareCH3>:
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_TIM_OC_SetCompareCH4>:
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_TIM_OC_SetCompareCH5>:
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_TIM_OC_SetCompareCH6>:
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	615a      	str	r2, [r3, #20]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a39      	ldr	r2, [pc, #228]	; (80021a4 <LL_TIM_Init+0xf8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00f      	beq.n	80020e4 <LL_TIM_Init+0x38>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ca:	d00b      	beq.n	80020e4 <LL_TIM_Init+0x38>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a36      	ldr	r2, [pc, #216]	; (80021a8 <LL_TIM_Init+0xfc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <LL_TIM_Init+0x38>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a35      	ldr	r2, [pc, #212]	; (80021ac <LL_TIM_Init+0x100>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <LL_TIM_Init+0x38>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a34      	ldr	r2, [pc, #208]	; (80021b0 <LL_TIM_Init+0x104>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d106      	bne.n	80020f2 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <LL_TIM_Init+0xf8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01b      	beq.n	8002132 <LL_TIM_Init+0x86>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002100:	d017      	beq.n	8002132 <LL_TIM_Init+0x86>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <LL_TIM_Init+0xfc>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <LL_TIM_Init+0x86>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <LL_TIM_Init+0x100>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00f      	beq.n	8002132 <LL_TIM_Init+0x86>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <LL_TIM_Init+0x104>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00b      	beq.n	8002132 <LL_TIM_Init+0x86>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <LL_TIM_Init+0x108>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <LL_TIM_Init+0x86>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <LL_TIM_Init+0x10c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <LL_TIM_Init+0x86>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a23      	ldr	r2, [pc, #140]	; (80021bc <LL_TIM_Init+0x110>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d106      	bne.n	8002140 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff2a 	bl	8001fa6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff16 	bl	8001f8a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <LL_TIM_Init+0xf8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00f      	beq.n	8002186 <LL_TIM_Init+0xda>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <LL_TIM_Init+0x104>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00b      	beq.n	8002186 <LL_TIM_Init+0xda>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <LL_TIM_Init+0x108>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <LL_TIM_Init+0xda>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <LL_TIM_Init+0x10c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <LL_TIM_Init+0xda>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <LL_TIM_Init+0x110>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d105      	bne.n	8002192 <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	4619      	mov	r1, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff18 	bl	8001fc2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff79 	bl	800208a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40012c00 	.word	0x40012c00
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40013400 	.word	0x40013400
 80021b4:	40014000 	.word	0x40014000
 80021b8:	40014400 	.word	0x40014400
 80021bc:	40014800 	.word	0x40014800

080021c0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021d6:	d045      	beq.n	8002264 <LL_TIM_OC_Init+0xa4>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021de:	d848      	bhi.n	8002272 <LL_TIM_OC_Init+0xb2>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e6:	d036      	beq.n	8002256 <LL_TIM_OC_Init+0x96>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d840      	bhi.n	8002272 <LL_TIM_OC_Init+0xb2>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f6:	d027      	beq.n	8002248 <LL_TIM_OC_Init+0x88>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fe:	d838      	bhi.n	8002272 <LL_TIM_OC_Init+0xb2>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002206:	d018      	beq.n	800223a <LL_TIM_OC_Init+0x7a>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220e:	d830      	bhi.n	8002272 <LL_TIM_OC_Init+0xb2>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d003      	beq.n	800221e <LL_TIM_OC_Init+0x5e>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b10      	cmp	r3, #16
 800221a:	d007      	beq.n	800222c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800221c:	e029      	b.n	8002272 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f8b5 	bl	8002390 <OC1Config>
 8002226:	4603      	mov	r3, r0
 8002228:	75fb      	strb	r3, [r7, #23]
      break;
 800222a:	e023      	b.n	8002274 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f92e 	bl	8002490 <OC2Config>
 8002234:	4603      	mov	r3, r0
 8002236:	75fb      	strb	r3, [r7, #23]
      break;
 8002238:	e01c      	b.n	8002274 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f9ab 	bl	8002598 <OC3Config>
 8002242:	4603      	mov	r3, r0
 8002244:	75fb      	strb	r3, [r7, #23]
      break;
 8002246:	e015      	b.n	8002274 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fa28 	bl	80026a0 <OC4Config>
 8002250:	4603      	mov	r3, r0
 8002252:	75fb      	strb	r3, [r7, #23]
      break;
 8002254:	e00e      	b.n	8002274 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 faa5 	bl	80027a8 <OC5Config>
 800225e:	4603      	mov	r3, r0
 8002260:	75fb      	strb	r3, [r7, #23]
      break;
 8002262:	e007      	b.n	8002274 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fb02 	bl	8002870 <OC6Config>
 800226c:	4603      	mov	r3, r0
 800226e:	75fb      	strb	r3, [r7, #23]
      break;
 8002270:	e000      	b.n	8002274 <LL_TIM_OC_Init+0xb4>
      break;
 8002272:	bf00      	nop
  }

  return result;
 8002274:	7dfb      	ldrb	r3, [r7, #23]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	7b12      	ldrb	r2, [r2, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	89d2      	ldrh	r2, [r2, #14]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a21      	ldr	r2, [pc, #132]	; (8002388 <LL_TIM_BDTR_Init+0x108>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d003      	beq.n	800230e <LL_TIM_BDTR_Init+0x8e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <LL_TIM_BDTR_Init+0x10c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10d      	bne.n	800232a <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a16      	ldr	r2, [pc, #88]	; (8002388 <LL_TIM_BDTR_Init+0x108>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d003      	beq.n	800233a <LL_TIM_BDTR_Init+0xba>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <LL_TIM_BDTR_Init+0x10c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d11b      	bne.n	8002372 <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40013400 	.word	0x40013400

08002390 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f023 0201 	bic.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f023 0202 	bic.w	r2, r3, #2
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0201 	bic.w	r2, r3, #1
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <OC1Config+0xec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00f      	beq.n	8002416 <OC1Config+0x86>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <OC1Config+0xf0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00b      	beq.n	8002416 <OC1Config+0x86>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a20      	ldr	r2, [pc, #128]	; (8002484 <OC1Config+0xf4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <OC1Config+0x86>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <OC1Config+0xf8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <OC1Config+0x86>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1e      	ldr	r2, [pc, #120]	; (800248c <OC1Config+0xfc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d11e      	bne.n	8002454 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f023 0208 	bic.w	r2, r3, #8
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f023 0204 	bic.w	r2, r3, #4
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fdb9 	bl	8001fde <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40013400 	.word	0x40013400
 8002484:	40014000 	.word	0x40014000
 8002488:	40014400 	.word	0x40014400
 800248c:	40014800 	.word	0x40014800

08002490 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f023 0210 	bic.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	0212      	lsls	r2, r2, #8
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f023 0220 	bic.w	r2, r3, #32
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f023 0210 	bic.w	r2, r3, #16
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a23      	ldr	r2, [pc, #140]	; (8002584 <OC2Config+0xf4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00f      	beq.n	800251c <OC2Config+0x8c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a22      	ldr	r2, [pc, #136]	; (8002588 <OC2Config+0xf8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00b      	beq.n	800251c <OC2Config+0x8c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a21      	ldr	r2, [pc, #132]	; (800258c <OC2Config+0xfc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <OC2Config+0x8c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a20      	ldr	r2, [pc, #128]	; (8002590 <OC2Config+0x100>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <OC2Config+0x8c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <OC2Config+0x104>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d11f      	bne.n	800255c <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	019b      	lsls	r3, r3, #6
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	019b      	lsls	r3, r3, #6
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fd43 	bl	8001ffa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40013400 	.word	0x40013400
 800258c:	40014000 	.word	0x40014000
 8002590:	40014400 	.word	0x40014400
 8002594:	40014800 	.word	0x40014800

08002598 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a23      	ldr	r2, [pc, #140]	; (800268c <OC3Config+0xf4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00f      	beq.n	8002622 <OC3Config+0x8a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <OC3Config+0xf8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00b      	beq.n	8002622 <OC3Config+0x8a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <OC3Config+0xfc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <OC3Config+0x8a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a20      	ldr	r2, [pc, #128]	; (8002698 <OC3Config+0x100>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <OC3Config+0x8a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <OC3Config+0x104>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11f      	bne.n	8002662 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	029b      	lsls	r3, r3, #10
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	015b      	lsls	r3, r3, #5
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fcce 	bl	8002016 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40013400 	.word	0x40013400
 8002694:	40014000 	.word	0x40014000
 8002698:	40014400 	.word	0x40014400
 800269c:	40014800 	.word	0x40014800

080026a0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	0212      	lsls	r2, r2, #8
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	031b      	lsls	r3, r3, #12
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	031b      	lsls	r3, r3, #12
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a23      	ldr	r2, [pc, #140]	; (8002794 <OC4Config+0xf4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00f      	beq.n	800272c <OC4Config+0x8c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <OC4Config+0xf8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00b      	beq.n	800272c <OC4Config+0x8c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <OC4Config+0xfc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <OC4Config+0x8c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <OC4Config+0x100>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <OC4Config+0x8c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <OC4Config+0x104>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d11f      	bne.n	800276c <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	039b      	lsls	r3, r3, #14
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	039b      	lsls	r3, r3, #14
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	019b      	lsls	r3, r3, #6
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	01db      	lsls	r3, r3, #7
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fc57 	bl	8002032 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40013400 	.word	0x40013400
 800279c:	40014000 	.word	0x40014000
 80027a0:	40014400 	.word	0x40014400
 80027a4:	40014800 	.word	0x40014800

080027a8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	041b      	lsls	r3, r3, #16
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <OC5Config+0xb4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00f      	beq.n	8002824 <OC5Config+0x7c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a16      	ldr	r2, [pc, #88]	; (8002860 <OC5Config+0xb8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00b      	beq.n	8002824 <OC5Config+0x7c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a15      	ldr	r2, [pc, #84]	; (8002864 <OC5Config+0xbc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <OC5Config+0x7c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <OC5Config+0xc0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <OC5Config+0x7c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <OC5Config+0xc4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d109      	bne.n	8002838 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fc02 	bl	800204e <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40013400 	.word	0x40013400
 8002864:	40014000 	.word	0x40014000
 8002868:	40014400 	.word	0x40014400
 800286c:	40014800 	.word	0x40014800

08002870 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	0212      	lsls	r2, r2, #8
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	051b      	lsls	r3, r3, #20
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a16      	ldr	r2, [pc, #88]	; (8002924 <OC6Config+0xb4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00f      	beq.n	80028ee <OC6Config+0x7e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <OC6Config+0xb8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00b      	beq.n	80028ee <OC6Config+0x7e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <OC6Config+0xbc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <OC6Config+0x7e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a13      	ldr	r2, [pc, #76]	; (8002930 <OC6Config+0xc0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d003      	beq.n	80028ee <OC6Config+0x7e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <OC6Config+0xc4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d109      	bne.n	8002902 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fbad 	bl	800206e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40013400 	.word	0x40013400
 800292c:	40014000 	.word	0x40014000
 8002930:	40014400 	.word	0x40014400
 8002934:	40014800 	.word	0x40014800

08002938 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	4a07      	ldr	r2, [pc, #28]	; (8002968 <LL_InitTick+0x30>)
 800294c:	3b01      	subs	r3, #1
 800294e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <LL_InitTick+0x30>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <LL_InitTick+0x30>)
 8002958:	2205      	movs	r2, #5
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000e010 	.word	0xe000e010

0800296c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ffdd 	bl	8002938 <LL_InitTick>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <LL_SetSystemCoreClock+0x1c>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4d0d      	ldr	r5, [pc, #52]	; (80029e0 <__libc_init_array+0x38>)
 80029ac:	4c0d      	ldr	r4, [pc, #52]	; (80029e4 <__libc_init_array+0x3c>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	2600      	movs	r6, #0
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	4d0b      	ldr	r5, [pc, #44]	; (80029e8 <__libc_init_array+0x40>)
 80029ba:	4c0c      	ldr	r4, [pc, #48]	; (80029ec <__libc_init_array+0x44>)
 80029bc:	f000 f820 	bl	8002a00 <_init>
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	2600      	movs	r6, #0
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	08002a38 	.word	0x08002a38
 80029e4:	08002a38 	.word	0x08002a38
 80029e8:	08002a38 	.word	0x08002a38
 80029ec:	08002a3c 	.word	0x08002a3c

080029f0 <memset>:
 80029f0:	4402      	add	r2, r0
 80029f2:	4603      	mov	r3, r0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d100      	bne.n	80029fa <memset+0xa>
 80029f8:	4770      	bx	lr
 80029fa:	f803 1b01 	strb.w	r1, [r3], #1
 80029fe:	e7f9      	b.n	80029f4 <memset+0x4>

08002a00 <_init>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr

08002a0c <_fini>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr
